
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.book.dao.BookReviewDAO">
<select id="getReviewCount" resultType="int">
    SELECT COUNT(*) 
    FROM BOOK_REVIEW 
    WHERE BOOKNUMBER = #{param.bookNumber} 
    AND REVIEWSTATUS = 'ACTIVE'
</select>

<insert id="insertReview">
    INSERT INTO BOOK_REVIEW (
        reviewid,
        BOOKNUMBER,
        USERNUMBER,
        REVIEWTITLE,
        REVIEWCONTENT,
        REVIEWRATING,
        REVIEWDATE,
        REVIEWMODIFIED_DATE,
        REVIEWSTATUS
    ) VALUES (
        SEQ_REVIEW_ID.NEXTVAL,
        #{bookNumber},
        #{userNumber},
        #{reviewTitle},
        #{reviewContent},
        #{reviewRating},
        SYSDATE,
        NULL,
        'ACTIVE'
    )
</insert>

<select id="checkReview" resultType="int">
    SELECT COUNT(*) 
    FROM BOOK_REVIEW
    WHERE USERNUMBER = #{userNumber}
    AND BOOKNUMBER = #{bookNumber}
    AND REVIEWSTATUS = 'ACTIVE'
</select>
	
<select id="getReviewById" resultType="com.boot.book.dto.ReviewDTO">
    SELECT 
        r.reviewid as reviewId,
        r.usernumber as userNumber,
        r.booknumber as bookNumber,
        r.reviewtitle as reviewTitle,
        r.reviewcontent as reviewContent,
        r.reviewrating as reviewRating,
        r.reviewdate as reviewDate,
        u.username as userName
    FROM 
        book_review r
    JOIN 
        userinfo u ON r.usernumber = u.usernumber
    WHERE 
        r.reviewid = #{reviewId}
</select>

<!-- 리뷰 업데이트 -->
<update id="updateReview" parameterType="com.boot.book.dto.ReviewDTO">
    UPDATE BOOK_REVIEW 
    SET 
        REVIEWTITLE = #{reviewTitle},
        REVIEWCONTENT = #{reviewContent},
        REVIEWRATING = #{reviewRating},
        REVIEWMODIFIED_DATE = SYSDATE
    WHERE 
        reviewid = #{reviewId}
        AND USERNUMBER = #{userNumber}
        AND REVIEWSTATUS = 'ACTIVE'
</update>

<!-- 리뷰 삭제 (소프트 삭제) -->
<update id="deleteReview" parameterType="com.boot.book.dto.ReviewDTO">
    UPDATE BOOK_REVIEW 
    SET 
        REVIEWSTATUS = 'DELETED',
        REVIEWMODIFIED_DATE = SYSDATE
    WHERE 
        reviewid = #{reviewId}
        AND USERNUMBER = #{userNumber}
        AND REVIEWSTATUS = 'ACTIVE'
</update>


<!-- 리뷰 도움됨 추가 -->
<insert id="addReviewHelpful" parameterType="com.boot.book.dto.ReviewHelpfulDTO">
    INSERT INTO REVIEW_HELPFUL (
        HELPFUL_ID,
        REVIEWID,
        USERNUMBER,
        HELPFUL_DATE
    ) VALUES (
        SEQ_HELPFUL_ID.NEXTVAL,
        #{reviewId},
        #{userNumber},
        SYSDATE
    )
</insert>

<!-- 리뷰 도움됨 취소 -->
<delete id="removeReviewHelpful" parameterType="com.boot.book.dto.ReviewHelpfulDTO">
    DELETE FROM REVIEW_HELPFUL
    WHERE REVIEWID = #{reviewId}
    AND USERNUMBER = #{userNumber}
</delete>

<!-- 리뷰 도움됨 여부 확인 -->
<select id="checkReviewHelpful" parameterType="com.boot.book.dto.ReviewHelpfulDTO" resultType="int">
    SELECT COUNT(*)
    FROM REVIEW_HELPFUL
    WHERE REVIEWID = #{reviewId}
    AND USERNUMBER = #{userNumber}
</select>

<!-- 리뷰별 도움됨 개수 조회 -->
<select id="getReviewHelpfulCount" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM REVIEW_HELPFUL
    WHERE REVIEWID = #{reviewId}
</select>

<!-- 리뷰 목록 조회 시 도움됨 정보 포함 (기존 getReview 쿼리 수정) -->
<select id="getReview" resultType="com.boot.book.dto.ReviewDTO">
    <![CDATA[
        SELECT *
        FROM (
            SELECT ROWNUM AS rn, r.*
            FROM (
                SELECT 
                    r.reviewid, 
                    r.BOOKNUMBER, 
                    r.USERNUMBER, 
                    r.REVIEWTITLE, 
                    r.REVIEWCONTENT, 
                    r.REVIEWRATING, 
                    r.REVIEWDATE,
                    r.REVIEWMODIFIED_DATE as reviewModifiedDate,
                    r.REVIEWSTATUS,
                    u.USERNAME,
                    (SELECT COUNT(*) FROM REVIEW_HELPFUL rh WHERE rh.REVIEWID = r.REVIEWID) as helpfulCount,
                    CASE 
                        WHEN EXISTS (
                            SELECT 1 FROM REVIEW_HELPFUL rh 
                            WHERE rh.REVIEWID = r.REVIEWID 
                            AND rh.USERNUMBER = #{param.userNumber, jdbcType=NUMERIC}
                        ) THEN 1
                        ELSE 0
                    END as helpfulByCurrentUser
                FROM 
                    BOOK_REVIEW r
                JOIN 
                    USERINFO u ON r.USERNUMBER = u.USERNUMBER
                WHERE 
                    r.BOOKNUMBER = #{param.bookNumber}
                    AND r.REVIEWSTATUS = 'ACTIVE'
                ORDER BY 
                    r.REVIEWDATE DESC
            ) r
            WHERE ROWNUM <= #{criteria.pageNum} * #{criteria.amount}
        )
        WHERE rn > (#{criteria.pageNum} - 1) * #{criteria.amount}
    ]]>
</select>

<!-- 모든 리뷰 조회 시 도움됨 정보 포함 (getAllReviewsByBookNumber 쿼리 수정) -->
<select id="getAllReviewsByBookNumber" parameterType="map" resultType="com.boot.book.dto.ReviewDTO">
    SELECT 
        r.reviewid, 
        r.BOOKNUMBER, 
        r.USERNUMBER, 
        r.REVIEWTITLE, 
        r.REVIEWCONTENT, 
        r.REVIEWRATING, 
        r.REVIEWDATE,
        r.REVIEWMODIFIED_DATE as reviewModifiedDate,
        r.REVIEWSTATUS,
        u.USERNAME,
        (SELECT COUNT(*) FROM REVIEW_HELPFUL rh WHERE rh.REVIEWID = r.REVIEWID) as helpfulCount,
        CASE 
            WHEN EXISTS (
                SELECT 1 FROM REVIEW_HELPFUL rh 
                WHERE rh.REVIEWID = r.REVIEWID 
                AND rh.USERNUMBER = #{userNumber, jdbcType=NUMERIC}
            ) THEN 1
            ELSE 0
        END as helpfulByCurrentUser
    FROM 
        BOOK_REVIEW r
    JOIN 
        USERINFO u ON r.USERNUMBER = u.USERNUMBER
    WHERE 
        r.BOOKNUMBER = #{bookNumber}
        AND r.REVIEWSTATUS = 'ACTIVE'
    ORDER BY 
        r.REVIEWDATE DESC
</select>
</mapper>